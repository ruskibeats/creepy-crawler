{
  "workflow": {
    "nodes": [
      {
        "parameters": {
          "options": {}
        },
        "id": "6501a54f-a68c-452d-b353-d7e871ca3780",
        "name": "When chat message received",
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "position": [
          380,
          400
        ],
        "webhookId": "cf1de04f-3e38-426c-89f0-3bdb110a5dcf",
        "typeVersion": 1.1
      },
      {
        "parameters": {
          "agent": "openAiFunctionsAgent",
          "options": {
            "systemMessage": "You are DB assistant. You need to run queries in DB aligned with user requests.\n\nRun custom SQL query to aggregate data and response to user. Make sure every table has schema prefix to it in sql query which you can get from `Get DB Schema and Tables List` tool.\n\nFetch all data to analyse it for response if needed.\n\n## Tools\n\n- Execute SQL query - Executes any sql query generated by AI\n- Get DB Schema and Tables List - Lists all the tables in database with its schema name\n- Get Table Definition - Gets the table definition from db using table name and schema name"
          }
        },
        "id": "cd32221b-2a36-408d-b57e-8115fcd810c9",
        "name": "AI Agent",
        "type": "@n8n/n8n-nodes-langchain.agent",
        "position": [
          680,
          400
        ],
        "typeVersion": 1.7
      },
      {
        "parameters": {
          "model": {
            "__rl": true,
            "mode": "list",
            "value": "gpt-4o-mini"
          },
          "options": {}
        },
        "id": "8accbeeb-7eaf-4e9e-aabc-de8ab3a0459b",
        "name": "OpenAI Chat Model",
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "position": [
          620,
          640
        ],
        "typeVersion": 1.2,
        "credentials": {}
      },
      {
        "parameters": {
          "descriptionType": "manual",
          "toolDescription": "Get table definition to find all columns and types",
          "operation": "executeQuery",
          "query": "select\n  c.column_name,\n  c.data_type,\n  c.is_nullable,\n  c.column_default,\n  tc.constraint_type,\n  ccu.table_name AS referenced_table,\n  ccu.column_name AS referenced_column\nfrom\n  information_schema.columns c\nLEFT join\n  information_schema.key_column_usage kcu\n  ON c.table_name = kcu.table_name\n  AND c.column_name = kcu.column_name\nLEFT join\n  information_schema.table_constraints tc\n  ON kcu.constraint_name = tc.constraint_name\n  AND tc.constraint_type = 'FOREIGN KEY'\nLEFT join\n  information_schema.constraint_column_usage ccu\n  ON tc.constraint_name = ccu.constraint_name\nwhere\n  c.table_name = '{{ $fromAI(\"table_name\") }}'\n  AND c.table_schema = '{{ $fromAI(\"schema_name\") }}'\norder by\n  c.ordinal_position",
          "options": {}
        },
        "id": "11f2013f-a080-4c9e-8773-c90492e2c628",
        "name": "Get Table Definition",
        "type": "n8n-nodes-base.postgresTool",
        "position": [
          1460,
          620
        ],
        "typeVersion": 2.5,
        "credentials": {}
      },
      {
        "parameters": {},
        "id": "0df33341-c859-4a54-b6d9-a99670e8d76d",
        "name": "Chat History",
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "position": [
          800,
          640
        ],
        "typeVersion": 1.3
      },
      {
        "parameters": {
          "descriptionType": "manual",
          "toolDescription": "Get all the data from Postgres, make sure you append the tables with correct schema. Every table is associated with some schema in the database.",
          "operation": "executeQuery",
          "query": "{{ $fromAI(\"sql_query\", \"SQL Query\") }}",
          "options": {}
        },
        "id": "c18ced71-6330-4ba0-9c52-1bb5852b3039",
        "name": "Execute SQL Query",
        "type": "n8n-nodes-base.postgresTool",
        "position": [
          1060,
          620
        ],
        "typeVersion": 2.5,
        "credentials": {}
      },
      {
        "parameters": {
          "descriptionType": "manual",
          "toolDescription": "Get list of all tables with their schema in the database",
          "operation": "executeQuery",
          "query": "SELECT \n    table_schema,\n    table_name\nFROM information_schema.tables\nWHERE table_type = 'BASE TABLE'\n    AND table_schema NOT IN ('pg_catalog', 'information_schema')\nORDER BY table_schema, table_name;",
          "options": {}
        },
        "id": "557623c6-e499-48a6-a066-744f64f8b6f3",
        "name": "Get DB Schema and Tables List",
        "type": "n8n-nodes-base.postgresTool",
        "position": [
          1260,
          620
        ],
        "typeVersion": 2.5,
        "credentials": {}
      }
    ],
    "connections": {
      "When chat message received": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Get Table Definition": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Chat History": {
        "ai_memory": [
          [
            {
              "node": "AI Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Execute SQL Query": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Get DB Schema and Tables List": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {},
    "meta": {
      "instanceId": "170e9c3ba2c186b70bfc3f7a83c230eae7b09809a42b46e53b7143fa611f00d1",
      "templateCredsSetupCompleted": true
    },
    "name": "Chat with PostgreSQL Database",
    "id": "91a9599d-48e7-49c7-9fe3-b0363b2cdfb7",
    "active": false,
    "settings": {
      "executionOrder": "v1"
    }
  },
  "metadata": {
    "metadata": {
      "title": "Workflow information: Use workflow",
      "description": "This workflow template is designed for any professionals seeking relevent data from database using natural language.",
      "version": "1.1"
    },
    "nodes": [
      {
        "type": "Task",
        "description": "Create a simple API endpoint using the Webhook and Respond to Webhook nodes\n\nWhy:\nYou can prototype or replace a backend process with a single workflow\n\nMain use cases:\nReplace backend logic with a workflow"
      },
      {
        "type": "Task",
        "description": "Merge two datasets into one based on matching rules\n\nWhy:\nA powerful capability of n8n is to easily branch out the workflow in order to process different datasets. Even more powerful is the ability to join them back together with SQL-like joining logic.\n\nMain use cases:\n Appending data sets\n Keep only new items\n Keep only existing items"
      },
      {
        "type": "This workflow allows extracting data from multiple pages website.\n\nThe workflow",
        "description": "1) Starts in a country list at https://www.theswiftcodes.com/browse-by-country/.\n2) Loads every country page (https://www.theswiftcodes.com/albania/)\n3) Paginates every page in the country page.\n4) Extracts data from the country page.\n5) Saves data to MongoDB.\n6) Paginates through all pages in all countries.\n\nIt uses getWorkflowStaticData('global') method to recover the next page (saved from the previous page), and it goes ahead with all the pages.\n\nThere is a first section where the countries list is recovered and extracted.\n\nLater, I try to read if a local cache page is available and I recover the cached page from the disk.\n\nFinally, I save data to MongoDB, and we paginate all the pages in the country and for all the countries.\n\nI have applied a cache system to save a visited page to n8n local disk. If I relaunch workflow, we check if a cache file exists to discard non-required requests to the webpage.\n\nIf the data present in the website changes, you can apply a Cron node to check the website once per week.\n\nFinally, before inserting data in MongoDB, the best way to avoid duplicates is to check that swift_code (the primary value of the collection) doesn't exist.\n\nI recommend using a proxy for all requests to avoid IP blocks. A good solution for proxy plus IP rotation is scrapoxy.io.\n\nThis workflow is perfect for small data requirements. If you need to scrape dynamic data, you can use a Headless browser or any other service.\n\nIf you want to scrape huge lists of URIs, I recommend using Scrapy + Scrapoxy."
      }
    ],
    "n8n_template_details": "Chat with Postgresql DatabasePublished 1 month agoCreated byKumoHQCategoriesEngineeringProductAIIT OpsUse workflowFREE",
    "n8n_template_description": "Template descriptionWho is this template for?This workflow template is designed for any professionals seeking relevent data from database using natural language.How it worksEach time user ask's question using the n8n chat interface, the workflow runs.Then the message is processed by AI Agent using relevent tools -Execute SQL Query,Get DB Schema and Tables ListandGet Table Definition, if required. Agent uses these tool to form and run sql query which are necessary to answer the questions.Once AI Agent has the data, it uses it to form answer and returns it to the user.Set up instructionsComplete the Set up credentials step when you first open the workflow. You'll need a Postgresql Credentials, and OpenAI api key.Template was created in n8nv1.77.0"
  },
  "analysis": "## Comprehensive Analysis of n8n Workflow: Chat with PostgreSQL Database\n\n### 1. Node Analysis\n\n- **When chat message received**: \n  - **Purpose**: Acts as a trigger node that starts the workflow upon receiving a chat message.\n  - **Configuration**: Utilizes a webhook to receive messages, identified by `webhookId`.\n  - **Role**: Entry point of the workflow, capturing user input for processing.\n\n- **AI Agent**:\n  - **Purpose**: Processes the chat message using an AI model to interpret and generate SQL queries or other database-related actions.\n  - **Configuration**: Configured to act as a DB assistant, using predefined instructions to interact with database tools and execute SQL queries.\n  - **Role**: Central processing unit of the workflow, directing tasks based on AI-generated outputs.\n\n- **OpenAI Chat Model**:\n  - **Purpose**: Provides language model capabilities, likely used to enhance or interpret chat inputs or AI agent outputs.\n  - **Configuration**: Uses the GPT-4o-mini model, indicating advanced natural language processing.\n  - **Role**: Supports the AI Agent by providing language understanding and generation capabilities.\n\n- **Get Table Definition**:\n  - **Purpose**: Retrieves metadata about database tables such as column names, data types, and constraints.\n  - **Configuration**: Executes a detailed SQL query to fetch table schema information.\n  - **Role**: Provides database schema details to the AI Agent for accurate SQL query formulation.\n\n- **Chat History**:\n  - **Purpose**: Temporarily stores chat interactions for context or auditing.\n  - **Configuration**: Likely configured to buffer recent chats.\n  - **Role**: Maintains a context window for the AI to reference past interactions.\n\n- **Execute SQL Query**:\n  - **Purpose**: Executes SQL queries generated by the AI Agent.\n  - **Configuration**: Dynamically executes SQL based on AI outputs.\n  - **Role**: Direct interaction with the database, performing data manipulation and retrieval.\n\n- **Get DB Schema and Tables List**:\n  - **Purpose**: Lists all tables and their schemas in the database, excluding system tables.\n  - **Configuration**: Executes a SQL query to fetch this list.\n  - **Role**: Provides a comprehensive view of the database structure for the AI Agent.\n\n### 2. Flow Analysis\n\n- **Data Flow**:\n  - Starts at the \"When chat message received\" node, triggering the workflow.\n  - Data flows to the \"AI Agent\" where it is processed and instructions are generated.\n  - Depending on the AI's output, subsequent nodes like \"OpenAI Chat Model\", \"Get Table Definition\", \"Execute SQL Query\", and \"Get DB Schema and Tables List\" are utilized to either fetch data or execute commands.\n  - \"Chat History\" may store ongoing session data for reference.\n\n- **Dependencies**:\n  - Most nodes are dependent on the \"AI Agent\" for directives.\n  - The \"AI Agent\" relies on outputs from \"OpenAI Chat Model\", \"Get Table Definition\", \"Execute SQL Query\", and \"Get DB Schema and Tables List\" to make informed decisions and responses.\n\n### 3. Business Vertical\n\n- **Industry**: Information Technology, specifically Database Management and AI-enhanced interfaces.\n- **Function**: Enhances database management tasks through an AI-driven chat interface, facilitating easier interaction with database systems.\n\n### 4. Use Cases\n\n- **Primary Use Case**: AI-driven chatbot for database management, allowing users to interact with a database via natural language queries.\n- **Additional Use Cases**:\n  - Automated report generation from database queries.\n  - Real-time data analysis and feedback through conversational AI.\n  - Training tool for new database administrators.\n\n### 5. Technical Details\n\n- **API Endpoints**: Not explicitly detailed in the JSON but would involve database connection endpoints and possibly external AI model endpoints.\n- **Data Structures**: Utilizes JSON for configuration, SQL for queries.\n- **Integration Points**: Integrates AI models with database management systems, leveraging PostgreSQL tools and possibly external language models like OpenAI.\n\n### 6. Vector Database Enrichment\n\n- **Keywords**: AI, PostgreSQL, database schema, SQL query, natural language processing, chatbot, webhook, GPT-4.\n- **Concepts**: AI-driven database interaction, schema extraction, SQL execution, chat history management.\n- **Patterns**: Use of AI to interpret and generate SQL queries based on natural language input, integration of AI tools with traditional database operations.\n\nThis structured analysis provides a clear understanding of the workflow's components, their interactions, and the broader context in which they operate, highlighting the innovative integration of AI with database management."
}